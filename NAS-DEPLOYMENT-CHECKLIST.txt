ðŸš€ SELLING-OPTIONS.COM NAS DEPLOYMENT CHECKLIST
=================================================

PRE-DEPLOYMENT REQUIREMENTS:
===========================

âœ… HARDWARE/SOFTWARE:
  â–¡ NAS with Docker support
  â–¡ Docker & Docker Compose installed
  â–¡ At least 2GB RAM available
  â–¡ 10GB free disk space
  â–¡ Network access to internet

âœ… PORTS AVAILABLE:
  â–¡ Port 80 (HTTP) - or use alternative 8080
  â–¡ Port 443 (HTTPS) - for SSL
  â–¡ Port 5432 (PostgreSQL) - optional external access

âœ… POLYGON.IO API:
  â–¡ Active Polygon.io account
  â–¡ API key: sk1_s9gRnpyfld7a2ZLng3mEdpkaDrqB
  â–¡ Developer plan with options access
  â–¡ Verify API key works at: https://polygon.io/docs

DEPLOYMENT STEPS:
=================

1. COPY FILES TO NAS:
   â–¡ Copy entire project folder to NAS
   â–¡ Ensure all files are present:
     - .env.nas (template)
     - docker-compose.nas.yml
     - deploy-to-nas.sh
     - Dockerfile
     - app.py and all other source files

2. SETUP ENVIRONMENT:
   â–¡ Copy .env.nas to .env
   â–¡ Edit .env file:
     - Verify POLYGON_API_KEY is correct
     - Change POSTGRES_PASSWORD from default
     - Update SECRET_KEY to random value
     - Set DOMAIN to your NAS IP/hostname (optional)

3. MAKE SCRIPT EXECUTABLE:
   â–¡ chmod +x deploy-to-nas.sh

4. RUN DEPLOYMENT:
   â–¡ ./deploy-to-nas.sh
   â–¡ Follow script output for any issues
   â–¡ Script will automatically:
     - Check Docker installation
     - Setup environment
     - Build containers
     - Start services
     - Verify health

POST-DEPLOYMENT VERIFICATION:
============================

âœ… CONTAINER STATUS:
  â–¡ All containers running: docker compose -f docker-compose.nas.yml ps
  â–¡ No restart loops in container logs
  â–¡ Application logs show successful startup

âœ… WEB ACCESS:
  â–¡ Homepage loads: http://your-nas-ip:80
  â–¡ Market data displaying (may show cached/previous close when market closed)
  â–¡ Options calculator loads: http://your-nas-ip:80/calculator.html
  â–¡ Navigation search works

âœ… API ENDPOINTS:
  â–¡ Health check: http://your-nas-ip:80/health
  â–¡ Quote endpoint: http://your-nas-ip:80/api/quote?symbol=AAPL
  â–¡ Market data: http://your-nas-ip:80/api/market-data
  â–¡ No 429 rate limit errors in logs

âœ… DATABASE:
  â–¡ PostgreSQL container running
  â–¡ Database accessible (if external access enabled)
  â–¡ Application can connect to database

TROUBLESHOOTING:
===============

CONTAINER RESTART LOOPS:
  â–¡ Check logs: docker logs selling-options-app
  â–¡ Common causes:
    - Missing POLYGON_API_KEY in .env
    - Database connection failed
    - Port conflicts
    - Permission issues

RATE LIMITING ISSUES:
  â–¡ Verify Polygon.io API key is valid
  â–¡ Check API quota usage at Polygon.io dashboard
  â–¡ Look for 429 errors in application logs
  â–¡ Market hours logic should reduce API calls when market closed

NO WEB ACCESS:
  â–¡ Check if ports 80/443 are blocked by firewall
  â–¡ Try alternative port 8080
  â–¡ Verify Caddy proxy is running
  â–¡ Check network connectivity to NAS

USEFUL COMMANDS:
===============

VIEW LOGS:
  docker compose -f docker-compose.nas.yml logs -f

RESTART SERVICES:
  docker compose -f docker-compose.nas.yml restart

STOP ALL:
  docker compose -f docker-compose.nas.yml down

UPDATE APPLICATION:
  git pull
  docker compose -f docker-compose.nas.yml up -d --build

EMERGENCY RESET:
  docker compose -f docker-compose.nas.yml down -v
  docker system prune -f
  ./deploy-to-nas.sh

SUCCESS INDICATORS:
==================

âœ… DEPLOYMENT SUCCESSFUL WHEN:
  â–¡ All containers show "Up" status
  â–¡ Homepage displays market data
  â–¡ Calculator loads and functions
  â–¡ Search returns quote results
  â–¡ No continuous restarts in logs
  â–¡ API endpoints respond normally

Your Selling-Options.com platform should now be running professionally on your NAS!

Support: Check application logs and container status for any issues.